# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from neo_msgs/IOBoard.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class IOBoard(genpy.Message):
  _md5sum = "bfa16d6202dd05ce5b3fdebf8a7d44db"
  _type = "neo_msgs/IOBoard"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# This message holds all data available from Neobotix IOBoard
 
bool[16] digital_inputs			# state for all digital inputs
bool[16] digital_outputs		# state for all digital outputs

uint8[8] analog_inputs			# analog input values


"""
  __slots__ = ['digital_inputs','digital_outputs','analog_inputs']
  _slot_types = ['bool[16]','bool[16]','uint8[8]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       digital_inputs,digital_outputs,analog_inputs

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(IOBoard, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.digital_inputs is None:
        self.digital_inputs = [False] * 16
      if self.digital_outputs is None:
        self.digital_outputs = [False] * 16
      if self.analog_inputs is None:
        self.analog_inputs = b'\0'*8
    else:
      self.digital_inputs = [False] * 16
      self.digital_outputs = [False] * 16
      self.analog_inputs = b'\0'*8

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_get_struct_16B().pack(*self.digital_inputs))
      buff.write(_get_struct_16B().pack(*self.digital_outputs))
      _x = self.analog_inputs
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_8B().pack(*_x))
      else:
        buff.write(_get_struct_8s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 16
      self.digital_inputs = _get_struct_16B().unpack(str[start:end])
      self.digital_inputs = map(bool, self.digital_inputs)
      start = end
      end += 16
      self.digital_outputs = _get_struct_16B().unpack(str[start:end])
      self.digital_outputs = map(bool, self.digital_outputs)
      start = end
      end += 8
      self.analog_inputs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(self.digital_inputs.tostring())
      buff.write(self.digital_outputs.tostring())
      _x = self.analog_inputs
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_8B().pack(*_x))
      else:
        buff.write(_get_struct_8s().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 16
      self.digital_inputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=16)
      self.digital_inputs = map(bool, self.digital_inputs)
      start = end
      end += 16
      self.digital_outputs = numpy.frombuffer(str[start:end], dtype=numpy.bool, count=16)
      self.digital_outputs = map(bool, self.digital_outputs)
      start = end
      end += 8
      self.analog_inputs = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8B = None
def _get_struct_8B():
    global _struct_8B
    if _struct_8B is None:
        _struct_8B = struct.Struct("<8B")
    return _struct_8B
_struct_8s = None
def _get_struct_8s():
    global _struct_8s
    if _struct_8s is None:
        _struct_8s = struct.Struct("<8s")
    return _struct_8s
_struct_16B = None
def _get_struct_16B():
    global _struct_16B
    if _struct_16B is None:
        _struct_16B = struct.Struct("<16B")
    return _struct_16B
